# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  coverImage: String
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DishChoice {
  name: String!
  extra: Float
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extra: Float
}

type Dish {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Float!
  photo: String
  description: String!
  restaurant: Restaurant!
  options: [DishOption!]
}

type Restaurant {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  coverImage: String!
  category: Category!
  menu: [Dish!]!
  owner: User!
  orders: [Order!]!
}

type OrderItemOption {
  name: String!
  choice: String
}

type OrderItem {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  options: [OrderItemOption!]
}

type Order {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: User
  driver: User
  restaurant: Restaurant
  items: [OrderItem!]!
  total: Float
  status: OrderStatus!
}

enum OrderStatus {
  PENDING
  COOKING
  PICKEDUP
  DELIVERD
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
  orders: [Order!]!
  rides: [Order!]!
}

enum UserRole {
  CLIENT
  OWNER
  DELIVERY
}

type EditProfileOutput {
  ok: Boolean!
  error: String
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
  user: User
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type UserProfileOutput {
  ok: Boolean!
  error: String
  user: User
}

type VerifyEmailOutput {
  ok: Boolean!
  error: String
}

type CreateRestaurantOutput {
  ok: Boolean!
  error: String
}

type UpdateRestaurantOutput {
  ok: Boolean!
  error: String
}

type DeleteRestaurantOuput {
  ok: Boolean!
  error: String
}

type CatgeoryOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  restaurants: [Restaurant!]
  category: Category
}

type AllCategoriesOutput {
  ok: Boolean!
  error: String
  categories: [Category!]
}

type RestaurantsOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  results: [Restaurant!]
}

type RestaurantOutput {
  ok: Boolean!
  error: String
  restaurant: Restaurant
}

type SearchRestaurantOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  restaurants: [Restaurant!]
}

type CreateDishOutput {
  ok: Boolean!
  error: String
}

type CreateOrderOutput {
  ok: Boolean!
  error: String
}

type GetOrdersOutput {
  ok: Boolean!
  error: String
  orders: [Order!]
}

type Query {
  me: User!
  profile(userid: Float!): UserProfileOutput!
  restaurants: [Restaurant!]!
  restaurant(restaurantInput: RestaurantInput!): RestaurantOutput!
  allrestaurant(restaurantInput: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(searchRestaurantInput: SearchRestaurantInput!): SearchRestaurantOutput!
  allCategories: AllCategoriesOutput!
  category(categoryInput: CategoryInput!): CatgeoryOutput!
}

input RestaurantInput {
  restaurantId: Float!
}

input RestaurantsInput {
  page: Float = 1
  limit: Float = 25
}

input SearchRestaurantInput {
  page: Float = 1
  limit: Float = 25
  query: String!
}

input CategoryInput {
  page: Float = 1
  limit: Float = 25
  slug: String!
}

type Mutation {
  editProfile(input: EditProfileInput!): EditProfileOutput!
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): CreateRestaurantOutput!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): UpdateRestaurantOutput!
  deleteRestaurant(deleteRestaurantInput: DeleteRestaurantInput!): DeleteRestaurantOuput!
  createDish(createDishInput: CreateDishInput!): CreateDishOutput!
  updateDish(updateDishInput: UpdateDishInput!): CreateDishOutput!
  deleteDish(deleteDishInput: DeleteDishInput!): CreateDishOutput!
  createOrder(createOrderInput: CreateOrderInput!): CreateOrderOutput!
  getOrders(getOrdersInput: GetOrdersInputType!): GetOrdersOutput!
}

input EditProfileInput {
  id: Float
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  password: String
  role: UserRole
  verified: Boolean
  restaurants: [RestaurantInputType!]
  orders: [OrderInputType!]
  rides: [OrderInputType!]
}

input RestaurantInputType {
  name: String!
  address: String!
  coverImage: String!
  category: CategoryInputType!
  menu: [DishInputType!]!
  owner: UserInputType!
  orders: [OrderInputType!]!
}

input CategoryInputType {
  name: String!
  coverImage: String
  slug: String!
  restaurants: [RestaurantInputType!]!
}

input DishInputType {
  name: String!
  price: Float!
  photo: String
  description: String!
  restaurant: RestaurantInputType!
  options: [DishOptionInputType!]
}

input DishOptionInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Float
}

input DishChoiceInputType {
  name: String!
  extra: Float
}

input UserInputType {
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [RestaurantInputType!]!
  orders: [OrderInputType!]!
  rides: [OrderInputType!]!
}

input OrderInputType {
  customer: UserInputType
  driver: UserInputType
  restaurant: RestaurantInputType
  items: [OrderItemInputType!]!
  total: Float
  status: OrderStatus!
}

input OrderItemInputType {
  options: [OrderItemOptionInputType!]
}

input OrderItemOptionInputType {
  name: String!
  choice: String
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input VerifyEmailInput {
  code: String!
}

input CreateRestaurantInput {
  name: String!
  address: String!
  coverImage: String!
  categoryName: String!
}

input UpdateRestaurantInput {
  name: String
  address: String
  coverImage: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantid: Float!
}

input CreateDishInput {
  name: String!
  price: Float!
  description: String!
  options: [DishOptionInputType!]
  restaurantId: Float!
}

input UpdateDishInput {
  name: String
  price: Float
  description: String
  options: [DishOptionInputType!]
  dishId: Float!
}

input DeleteDishInput {
  dishId: Float!
}

input CreateOrderInput {
  restaurantId: Float!
  items: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemOptionInputType!]
}

input GetOrdersInputType {
  status: OrderStatus
}
